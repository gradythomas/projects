(this["webpackJsonpreact-gh-pages"]=this["webpackJsonpreact-gh-pages"]||[]).push([[0],{81:function(e,t,a){"use strict";a.r(t);var i=a(0),o=a(7),n=a.n(o),r=a(117),s=a(47),d=a(111),c=a(112),l=a(113),h=a(110),u=a(118),m=a(121),g=a(120),p=a(115),b=a(33),w=a.n(b),f=a(59),y=a.n(f),j=a(58),v=a.n(j),x=a(60),O=a.n(x),k=a(57),I=a.n(k),T=a(61),S=a.n(T),C=a(106),H=a(108),A=a(2),B=Object(C.a)((function(e){return{blogHeader:{marginBottom:10,marginTop:20,color:e.palette.primary.main},divider:{marginTop:15,marginBottom:15,backgroundColor:e.palette.primary.main}}}));function P(e){var t=B();return Object(A.jsxs)(A.Fragment,{children:[Object(A.jsx)(H.a,{className:t.divider}),Object(A.jsx)(h.a,{className:t.blogHeader,variant:"h5",children:Object(A.jsx)("b",{children:e.text})})]})}var F=Object(C.a)((function(e){return{blogHeader:{marginBottom:10,marginTop:20}}}));function D(e){F();return Object(A.jsx)(h.a,{variant:"body1",children:Object(A.jsx)("span",{dangerouslySetInnerHTML:{__html:e.text}})})}var R=Object(C.a)((function(e){return{blogHeader:{marginBottom:10,marginTop:20}}}));function _(e){R();return Object(A.jsxs)("div",{style:{flexDirection:"column"},children:[Object(A.jsx)(P,{text:e.header}),Object(A.jsx)(D,{text:e.paragraph})]})}var E=Object(C.a)((function(e){return{blogHeader:{marginBottom:10,marginTop:20,color:e.palette.primary.main},divider:{marginTop:15,marginBottom:15,backgroundColor:e.palette.primary.main}}}));function N(){var e=E(),t=["About Me","Hi, welcome to my portfolio. My name is Grady Thomas and I am a second-year student at MIT majoring in Electrical Engineering and Computer Science (6-2)         and concentrating in Music. I am most interested in embedded system development and projects that physically interact with the world around us.         This site has a little bit about various school and personal projects I have completed. Take a look around! Outside of school, I love music,         especially playing guitar, recording and making music, and seeing live shows. I also really enjoy being outside and climbing, hiking, biking, and camping. I am involved in         the outdoors community at MIT as a Co-Leader with the Outing Club and am a graduate of the 2021 NOLS Summer Semester in Alaska program, where I spent 75 days mountaineering,         backpacking, and sea kayaking in the Alaskan backcountry. I grew up in Atlanta where I went to The Westminster Schools and now live in Boston while I attend MIT."],a=["Site Design","This website was created with React, hosted by GitHub Pages, and the source code is located in my GitHub profile. I chose React because I wanted an opportunity to         practice what I had learned at my internships at GTRI and BetterLesson, where I did full stack development that included React frontends. Although this site is not         currently very dynamic, which is what React is best known for, I wanted to keep the door open to easily integrate any web apps I may create in the future. Since I am not         much of a designer, although I am working on my design skills, I am using Material UI for basic components and structure. At the moment, there is no real backend         since the site is mostly static. However, if I eventually integrate some sort of web app, I plan on using the Flask framework and SQL and hosting it with Heroku."];return Object(A.jsxs)(A.Fragment,{children:[Object(A.jsxs)("div",{style:{display:"flex",flexDirection:"row",flexWrap:window.innerWidth<750?"wrap":"nowrap"},children:[Object(A.jsx)(_,{header:t[0],paragraph:t[1]}),Object(A.jsx)("img",{style:{marginLeft:50,marginTop:10},src:"/projects/self_pic.jpeg",height:"321",width:"271"})]}),Object(A.jsx)(_,{header:a[0],paragraph:a[1]}),Object(A.jsx)(H.a,{className:e.divider}),Object(A.jsxs)("div",{style:{marginTop:40,justifyContent:"space-around",display:"flex",flexDirection:"row",flexWrap:window.innerWidth<750?"wrap":"nowrap"},children:[Object(A.jsx)("img",{height:"504",width:"378",src:"/projects/climbing_pic1.png"}),Object(A.jsx)("img",{height:"504",width:"378",src:"/projects/glacier_pic2.png"})]}),Object(A.jsx)("div",{style:{marginTop:40,justifyContent:"space-around",display:"flex"},children:Object(A.jsx)("img",{height:"604",width:"806",src:"/projects/mountain_pic.jpg"})}),Object(A.jsx)(h.a,{component:"div",style:{height:"20vh"}})]})}var q=Object(C.a)((function(e){return{imgBox:{margin:30},imgContainer:{display:"flex",width:"100%",flexDirection:"row",justifyContent:"center"}}}));function L(e){var t=q();return Object(A.jsxs)(A.Fragment,{children:[Object(A.jsx)("div",{className:t.imgContainer,children:Object(A.jsx)("img",{className:t.imgBox,src:e.src,width:e.width,height:e.height})}),Object(A.jsx)("div",{className:t.imgContainer,children:Object(A.jsx)(h.a,{variant:"body2",children:Object(A.jsx)("i",{children:e.caption})})})]})}var G=Object(C.a)((function(e){return{imgBox:{margin:30},imgContainer:{display:"flex",width:"100%",flexDirection:"row",justifyContent:"center",marginTop:20,marginBottom:10}}}));function M(){var e=G(),t=["Background","In the 2020 Spring Semester I took 6.08, or <i>Introduction to Computer Science and Electrical Engineering via Interconnected Embedded Systems</i>.         This class was very hands on and used the ESP32 microcontroller and a class Python server to teach the basics of embedded system design         and the Internet of Things through labs and projects. I really loved this class, and it is probably my favorite class I've taken so far at MIT.         For our final project, we were given 4 weeks in teams of 5 to build something interesting and complex that used both our ESP32 system and a REST API hosted         on the class server. We decided to build a sampler, a musical instrument that can record a sound and then play it back with a keyboard. Unfortunately, we         were sent home due to COVID-19 in March 2020, so the whole of this project was done remotely. This meant all of our collaboration was done over GitHub and Zoom,         and the teaching team shipped us any extra parts we needed, such as the speaker and copper tape."],a=["Capabilities","Our final product was a fairly robust sampling and song creation machine. There was a UI displayed on the ESP LCD screen that was controlled with two buttons.         A user could record a sound through the microphone, where the raw sound data would then be sent to the server to be put through our Python pitch shifting         algorithm that returned the 12 notes of the chromatic scale back down to the ESP, where it was stored in memory. The user could then choose to record a song with         the new sound, and use the capacitive touch keyboard to do so. Each touch triggered a note to be played out of the speaker. Once the song was finished,         it was sent to and stored on the         server in a SQL database. Users could use their browser to click through and listen to various songs and sounds recorded by other users."],i=["Personal Challenges","Since this was a team project, I focused on some parts more than others. Specifically, I worked a lot on the hardware part of sound: recording through the mic         and playing it back through the speaker. Recording was not very difficult, as all you have to do is directly read the voltages off the correct analog IO pin.         The ESP32 has a 12-bit ADC, so we got 12-bit numbers from reading this input. However, the amplifier/speaker breakout board we used needed 8-bit input, and to write         to a <code>wav</code> file (for the browser interface and testing) we needed either 8-bit or 16-bit input. Our initial approach was to use a mu-law encoding algorithm we had         used in a previous lab; however, this created quite a bit of distortion. We then tried linearly shifting the numbers (i.e. divide everything by 16) which initially         led to a strange bug of seemingly playing no sound. However, we discovered that dividing by 16 led to getting quite a few 0's in our data, which when sending to the         server as binary data was interpreted as a null character and ended the string prematurely. Shifting all 0's to 1 fixed the issue and gave us clean, 8-bit audio.         Once the data was 8-bit, playing the audio was relatively straight forward and did not require any complex third party libraries. Initially, we had planned to write         each note to a <code>wav</code> file on an SD card, and play those files when triggered. However, we had just enough flash memory to store the notes' binary data in char arrays         and therefore decided not to complicate it with external storage. Playing these notes was as straightforward as writing the data from each array to the DAC pin;         the tricky part was getting the audio to play back at the right rate. Since it was recording at 8000 kHz, it needed to be written to the DAC at the same rate, which was         achieved by slowing down the internal clock with delay functions to 8000 kHz. <br /><br />        Another part of the project I worked on a fair amount was figuring out how to write raw audio data (essentially just a list of voltages) to a <code>wav</code> file. This proved         more difficult than we initially thought, as most libraries expected some sort of encoded data or data that had been recorded in Python into some sort of object.         However, we just had an array of numbers. As I read more into the documentation for the Python standard library <code>wave</code>, I found functions for writing binary data         to a <code>wav</code> file. However, this was my first time every interacting with binary data, especially in the realm of sound, and it took quite a bit of trial and error         to get the framerate, data size, and date rate to match properly between the ESP32 and Python script. However, once everything was matched up properly, the data         was packed up into structs and written to a <code>wav</code> file as 8-bit audio that could be played for testing and in the browser. Getting this working quickly was very         important as it was very difficult to test our recording and pitch shifting without any playback capabilities. <br /><br />         I intentionally worked primarily on parts of the project dealing with binary data and low level hardware, as those were areas I felt the least comfortable with and wanted         to learn about the most. I think this project prepared me very well for the work I did at GTRI dealing with reading, writing, and encoding raw binary data. I also         found it very satisfying to see how computers dealt with (and implement myself) recorded sound and sound files at the lowest level."];return Object(A.jsxs)(A.Fragment,{children:[Object(A.jsx)(_,{header:t[0],paragraph:t[1]}),Object(A.jsx)(L,{src:"/projects/sampler_pic.jpg",width:"504",height:"378",caption:"The final product"}),Object(A.jsx)(_,{header:a[0],paragraph:a[1]}),Object(A.jsx)(L,{src:"/projects/song_ui.png",width:"60%",height:"60%",caption:"Browser UI"}),Object(A.jsx)(_,{header:i[0],paragraph:i[1]}),Object(A.jsx)(P,{text:"Demonstration"}),Object(A.jsx)("div",{className:e.imgContainer,children:Object(A.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/D0RY7BqFPo0",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})}),Object(A.jsx)("div",{className:e.imgContainer,children:Object(A.jsx)(h.a,{variant:"body2",children:Object(A.jsx)("i",{children:"Recorded by teammate for final report"})})})]})}var U=Object(C.a)((function(e){return{videoBox:{display:"flex",justifyContent:"center",paddingTop:10},blogHeader:{marginBottom:10,marginTop:20}}}));function W(){var e=U();return Object(A.jsxs)(A.Fragment,{children:[[["Background","<b>nugs.net</b> is a streaming service for primarily live music and              seems to be built on the AngularJS framework. I felt that nugs was a little unpolished compared to some other streaming services,              specifically with things like authentication and streaming optimization, and wanted to poke around the code to see what was going              on under the hood. I had messed around with the chrome dev tools before, and decided to try and see if I could find out how the music was streamed.              From my initial looking, the web app used AngularJS for its UI."],["Vulnerability Description","Using the chrome dev tools, I discovered that when a song is played, the angular callback is added in a new file              that includes a URL stored in the key streamLink. This file is a few levels down in the sources section;              it seems to be related to something called BigRiver, which could be an internal or external JS library.              Following the URL from the file leads to a blank page where the mp3 file is embedded in a basic              html video player with the audio/mp3 file type. Right clicking on this file allows you to save the audio as a file to your computer."],["Analysis","Given that nugs.net is purely a web or phone streaming application, and not for downloading or purchasing music, the user should not be able to download any music from the site. From my perspective, it seems like there are a couple issues here. For one, the file storage server should probably be more secure, or it shouldn\u2019t load the entire mp3 file at once. Furthermore, the whole file is actually sent from the server to the client side of the page. If you navigate to the Network tab of the dev tools and view the requests being made, when a song is played, the client makes a request to the server that returns the entire audio file in the body of the HTTP response. Opening that response in a new tab also allows you to download the audio file, so you don\u2019t even have to navigate to the server the request is being made to. This streaming strategy also explains why nugs.net can be very slow at times to load a song, as it is trying to load the entire song before it starts playing, instead of actually streaming it as it plays. For comparison\u2019s sake, I took a look at similar requests that are made when streaming a song on Spotify, and it is very different. First of all, the server where the files are held is not accessible. Secondly, it streams the audio in pieces that are also encrypted, or at least not in a form that can just be downloaded.            <br /><br />            Another issue I discovered while digging around the nugs JavaScript code is that their API is totally public and accessible. From the console in the dev tools, you can easily make requests to their API and get things like song ID\u2019s, a list of concert venues, a list of total band names, and anything else the frontend might need to display. Given a song ID, you can also generate the URL needed to get a certain song from the server. To demonstrate how deep this vulnerability runs, I wrote a python script that given a starting song ID, repeatedly pings the API with the python requests library for the URL\u2019s to the server, then makes requests to the storage server and downloads the song that is returned by the HTTP response. In theory, starting this script with a very small ID and letting it run for hours could download the entire nugs.net library.            <br /><br />            Obviously, I do not use this script as that would definitely violate the Terms of Service and is likely illegal, but it was interesting experiment in web penetration testing. I believe it would take a relatively easy fix, perhaps by making the file server private, or requiring some sort of authentication from the client before serving the file. I think putting another level of security on the API itself would also be a good idea."]].map((function(e){return Object(A.jsx)(_,{header:e[0],paragraph:e[1]})})),Object(A.jsx)(P,{text:"Demonstration"}),Object(A.jsx)("div",{className:e.videoBox,children:Object(A.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/q_uS7ZxgQzw",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})})]})}function J(){return Object(A.jsx)(h.a,{variant:"body1",children:"This page documents the brushless motor I designed and created for 6.A01, or my freshman advising seminar about making at MIT."})}var z=Object(C.a)((function(e){return{videoBox:{display:"flex",justifyContent:"center",paddingTop:10},blogHeader:{marginBottom:10,marginTop:20}}}));function Z(){var e=z(),t=["Background","Guitar playing and music have been one of my biggest hobbies for about 6 years now. While I also love listening to music,         a few years ago I began recording my own music. That has since snowballed into a big interest in music production and         technology. I have recorded a fair amount of songs, but at this point only released one, with my friend Lonnie Reid         on vocals (as well as lyric songwriting). I also have a SoundCloud profile with more in progress work!"];return Object(A.jsxs)(A.Fragment,{children:[Object(A.jsx)(_,{header:t[0],paragraph:t[1]}),Object(A.jsx)("br",{}),Object(A.jsx)("div",{className:e.videoBox,children:Object(A.jsx)("iframe",{src:"https://open.spotify.com/embed/track/32OTogCfNH5ZoaZsLlb5Vb",width:"300",height:"380",frameborder:"0",allowtransparency:"true",allow:"encrypted-media"})}),Object(A.jsx)("br",{}),Object(A.jsx)("div",{className:e.videoBox,children:Object(A.jsx)("iframe",{width:"100%",height:"300",scrolling:"no",frameborder:"no",allow:"autoplay",src:"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/1174613302&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true"})})]})}var V=Object(C.a)((function(e){return{root:{display:"flex",flexDirection:"column",height:"100%"},title:{flexGrow:1},container:{padding:40,backgroundColor:"#FFFFFF",height:"100%",flexGrow:1}}}));function Y(){var e=V(),t=Object(i.useState)(!1),a=Object(s.a)(t,2),o=a[0],n=a[1],r=Object(i.useState)(null),b=Object(s.a)(r,2),f=b[0],j=b[1],x=Object(i.useState)(0),k=Object(s.a)(x,2),T=k[0],C=k[1],H=function(e){C(e.target.value),n(!1)},B={0:"Home",1:"6.08 Sampler Project",2:"nugs.net Exploit",4:"Recorded Music"};return Object(A.jsxs)("div",{className:e.root,children:[Object(A.jsx)(d.a,{position:"sticky",children:Object(A.jsxs)(c.a,{children:[Object(A.jsx)(l.a,{edge:"start",color:"inherit",onClick:function(e){n(!0),j(e.currentTarget)},children:Object(A.jsx)(w.a,{})}),Object(A.jsx)(h.a,{variant:"h6",className:e.title,children:B[T]}),Object(A.jsx)(u.a,{anchorEl:f,open:o,onClose:function(){return n(!1)},children:Object.keys(B).map((function(e){return Object(A.jsx)(m.a,{value:e,onClick:H,children:B[e]})}))}),Object(A.jsx)(g.a,{title:"LinkedIn",color:"inherit",children:Object(A.jsx)(l.a,{onClick:function(e){window.open("https://www.linkedin.com/in/grady-thomas-7530a71a2","_blank")},children:Object(A.jsx)(I.a,{})})}),Object(A.jsx)(g.a,{title:"GitHub",color:"inherit",children:Object(A.jsx)(l.a,{onClick:function(e){window.open("https://github.com/gradythomas","_blank")},children:Object(A.jsx)(v.a,{})})}),Object(A.jsx)(g.a,{title:"Resume",color:"inherit",children:Object(A.jsx)(l.a,{onClick:function(e){window.open("/projects/ResumePDF.pdf","_blank")},children:Object(A.jsx)(y.a,{})})}),Object(A.jsx)(g.a,{title:"Spotify",color:"inherit",children:Object(A.jsx)(l.a,{onClick:function(e){window.open("https://open.spotify.com/artist/6TkfOksTZM6tfOU8knP0gd?si=caVUG_9wR0utpYd2MEan6A","_blank")},children:Object(A.jsx)(O.a,{})})}),Object(A.jsx)(g.a,{title:"Email",color:"inherit",children:Object(A.jsx)(l.a,{onClick:function(e){window.open("mailto:gradyt@mit.edu")},children:Object(A.jsx)(S.a,{})})})]})}),Object(A.jsxs)(p.a,{className:e.container,maxWidth:"md",children:[0==T&&Object(A.jsx)(N,{}),1==T&&Object(A.jsx)(M,{}),2==T&&Object(A.jsx)(W,{}),3==T&&Object(A.jsx)(J,{}),4==T&&Object(A.jsx)(Z,{})]})]})}var Q=a(116),K=a(46),X=a(62),$=Object(X.a)({palette:{primary:{main:"#086788"},secondary:{main:"#19857b"},error:{main:K.a.A400},background:{default:"#0E0E52"}}});function ee(){return Object(A.jsxs)(Q.a,{theme:$,children:[Object(A.jsx)(r.a,{}),Object(A.jsx)(Y,{})]})}n.a.render(Object(A.jsx)(ee,{}),document.querySelector("#root"))}},[[81,1,2]]]);
//# sourceMappingURL=main.e72251de.chunk.js.map